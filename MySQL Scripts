/* Modelagem Básica - 
ENTIDADE = TABELA 
CAMPOS - ATRIBUTOS */

CLIENTE

NOME - CARACTER(30)
CPF - NUMERICO(11)
EMAIL - CARACTER(30)
TELEFONE - CARACTER(30)
ENDERECO - CARACTER(100)
SEXO - CARACTER (1)

/* PROCESSOS DE MODELAGEM */

/* FASE 01 E FASE 02 - AD ADM DE DADOS */
MODELAGEM CONCEITUAL - RASCUNHO
MODELAGEM LÓGICA - QUALQUER PROGRAMA DE MODELAGEM

/* FASE 03 - DBA / AD */
MODELAGEM FÍSICA - SCRIPS DE BANCO

/* CRIANDO BANCO DE DADOS */
CREATE DATABASE PROJETO;

/*CONECTANDO-SE AO BANCO*/
USE PROJETO;

/* CRIANDO A TABELA DE CLIENTES */

CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100)

);

/* VERIFICANDO AS TABELAS DO BANCO */
SHOW TABLES;


/* DESCOBRINDO A ESTRUTURA DE UMA TABELA*/
DESC CLIENTE;

/* SINTAXE BASICA DE INSERÇÃO - INSERT INTO TABELA...*/
/* OMITINDO COLUNAS */
INSERT INTO CLIENTE VALUES('JOAO', 'M','JOAO@GMAIL.COM', 988638273,'22923110','MAIA LACERDA
 - ESTACIO - RIO DE JANEIRO - RJ');
 
INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO
- CENTRO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('JORGE','M',NULL,88575896,'58748895','OSCAR CURY - BOM RETIRO - RJ');


/* FORMA 02 - INFORMANDO AS COLUNAS*/
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES
 - TIJUCA- RIO DE JANEIRO - RJ','947785696',887774856);

/* FORMA 03 - INSERT COMPACTO - SOMENTE MYSQL*/
INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
('CARLA','F','CARLA@TERATICOM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES
 - TIJUCA- RIO DE JANEIRO - RJ','947780020',99999999999); /*OUT OF RANGE CPF*/



/* COMANDO SELECT
SELECÃO, PROJEÇÃO E JUNÇÃO */

SHOW TABLES /*SÓ NO MYSQL*/

SELECT NOW() AS DATA_HORA, 'BILO' AS 'GATA'; /*DATA E HORA ATUAL*/

SELECT 'LILIAN';

SELECT 'ANA';


/* ALIAS DE COLUNAS*/

SELECT NOME, SEXO, EMAIL FROM CLIENTE;

SELECT NOME AS CLIENTE, SEXO, EMAIL FROM CLIENTE;

SELECT NOME, SEXO, EMAIL, ENDERECO FROM CLIENTE;

SELECT NOME, SEXO, EMAIL, ENDERECO, NOW() AS DATA_HORA FROM CLIENTE;


/*FILTRANDO DADOS COM WHERE */

SELECT NOME, SEXO FROM CLIENTE
WHERE SEXO = 'M';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO = 'RJ'; /*NÃO RETORNA PORQUE NÃO É IGUAL*/


/* UTILIZANDO O LIKE - CARACTERE CORINGA %*/
SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE ENDERECO LIKE '%SP' OR '%RJ';


EXERCÍCIO: 

CREATE DATABASE LIVRARIA;

CREATE TABLE LIVROS(
	LIVRO VARCHAR(100),
	AUTOR VARCHAR(100),
	SEXO CHAR(1),
	PAGINAS INT(5), 
	EDITORA VARCHAR(30),
	VALOR FLOAT(10,2),
	UF CHAR(2),
	ANO INT(4)
);	

INSERT INTO LIVROS VALUES(
'Cavaleiro Real','Ana Claudia','F',465,'Atlas',49.9,'RJ',2009);

INSERT INTO LIVROS VALUES(
'SQL para leigos','João Nunes','M',450,'Addison',98,'SP',2018);

INSERT INTO LIVROS VALUES(
'Receitas Caseiras','Celia Tavares','F',210,'Atlas',45,'RJ',2008);

INSERT INTO LIVROS VALUES(
'Pessoas Efetivas','Eduardo Santos','M',390,'Beta',78.99,'RH',2018);

INSERT INTO LIVROS VALUES(
'Hábitos Saudáveis','Eduardo Santos','M',630,'Beta',150.98,'RJ',2019);

INSERT INTO LIVROS VALUES(
'A Casa Marrom','Hermes Macedo','M',250,'Bubba',60,'MG',2016);

INSERT INTO LIVROS VALUES(
'Estácio Querido','Geraldo Francisco','M',310,'Insignia',100,'ES',2015);

INSERT INTO LIVROS VALUES(
'Pra Sempre Amigas','Leda Silva','F',510,'Insignia',78.98,'ES',2011);

INSERT INTO LIVROS VALUES(
'Copas Inesqueciveis','Marco Alcantara','M',200,'Larson',130.98,'RS',2018);

INSERT INTO LIVROS VALUES(
'O Poder da Mente','Clara Mafra','F',120,'Continental',56.58,'SP',2017);


/* Trazer todos os dados */
SELECT * FROM LIVROS;

/* Trazer o nome do livro e o nome da editora*/
SELECT LIVRO, EDITORA FROM LIVROS;

/* Trazer o nome do livro e a UF dos livros publicados por autores do sexo M*/
SELECT LIVRO, UF
FROM LIVROS
WHERE SEXO = 'M';

/* Trazer o nome do livro e número de páginas dos livros publicados por autores F*/
SELECT LIVRO, PAGINAS
FROM LIVROS
WHERE SEXO = 'F';


/* Trazer os valores dos livros das editoras de São Paulo*/
SELECT LIVRO, VALOR
FROM LIVROS
WHERE UF = 'SP';



/* OPERADORES LÓGICOS*/
/* 
OR = ao menos uma das condições seja verdadeira
AND = todas as condições precisam ser verdadeiras.


/* Trazer os dados dos autores M que tiverem livros publicados em São Paulo ou Rio de Janeiro*/
SELECT AUTOR, SEXO, UF
FROM LIVROS
WHERE SEXO = 'M' 
AND (UF = 'SP' OR UF = 'RJ');


/* CONTANDO OS REGISTROS DE UMA TABELA*/
SELECT COUNT(*) AS "QUANTIDADE DE REGISTROS" FROM LIVROS;

/* OPERADOR GROUP BY*/
SELECT SEXO, COUNT(*)
FROM CLIENTE
GROUP BY SEXO;


/* EXERCICIO NO BANCO EXERCICIO*/

SELECT COUNT(*) FROM FUNCIONARIOS;

--Traga os funcionarios que trabalhem
--no departamento de filmes OU no
--departamento de roupas

-- 21 | Filmes   53 | Roupas

--Como estamos trabalhando com OR e a segunda condicao é opcional
--colocamos na primeira condicao quem tem mais chances de uma saida
--verdadeira, pois a segunda condicao nao será checada nesse caso.

select * from funcionarios
where departamento = 'Roupas'
or
departamento = 'Filmes';

SELECT COUNT(*), departamento
FROM FUNCIONARIOS
group by departamento;

SELECT COUNT(*), departamento
FROM FUNCIONARIOS
group by departamento
order by 1;

WHERE DEPARTAMENTO = 'Filmes' OR DEPARTAMENTO = 'Roupas'

--O gestor de marketing pediu a lista das funcionarias (AS) = FEMININO que trabalhem no departamento 
--de filmes ou no departamento lar. Ele necessita enviar um email para as colaboradoras
--desses dois setores. OR +  AND *

--Feminino 491 ocorrencias
select count(*), sexo
from funcionarios
group by sexo;

--52 | Lar  21 Filmes
select count(*), departamento
from funcionarios
group by departamento;

/*
QUANDO FOR OR = MAIOR NÚMERO DE OCORRÊNCIAS NA ESQUERDA
QUANDO FOR AND = MENOR NÚMERO DE OCORRENCIAS NA ESQUERDA
*/

SELECT * FROM FUNCIONARIOS
WHERE 
(DEPARTAMENTO = 'LAR' AND SEXO = 'FEMININO')
OR
(DEPARTAMENTO = 'FILMES' AND SEXO = 'FEMININO')
ORDER BY DEPARTAMENTO;


SELECT * FROM FUNCIONARIOS
WHERE SEXO = 'MASCULINO' OR DEPARTAMENTO = 'JARDIM';


/*VALORES NULOS*/
SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NULL;

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NOT NULL;
/* NÃO DA PRA IGUALAR ALGO À NULL*/


/*UPDATE - ATUALIZAR VALORES*/
UPDATE CLIENTE
SET EMAIL = 'LILIAN@HOTMAIL.COM';
/*FAMOSO "UPDATE SEM WHERE" HEHEHE*/

UPDATE CLIENTE
SET EMAIL = 'JOAO@GMAIL.COM'
WHERE NOME = 'JOAO'


/* DELETE - DELETANDO REGISTROS*/

DELETE FROM CLIENTE;
/*FAMOSO DELETE TUDO*/

SELECT COUNT(*) FROM CLIENTE; --TOTAL 6

SELECT COUNT(*) FROM CLIENTE --TOTAL DELETADO 1
WHERE NOME = 'ANA';

DELETE FROM CLIENTE
WHERE NOME = 'ANA';

SELECT COUNT(*) FROM CLIENTE; --RESTANTE 5

SELECT 6 - 1; --OPERAÇÃO NÃO FICA ARMAZENADA, SÓ PRA VERIFICAR.

INSERT INTO CLIENTE
VALUES ('CARLA','F','CARLINHA19@GMAIL.COM',456344981,'99345-342','RUA DA ZUEIRA - CANADA');

DELETE FROM CLIENTE
WHERE NOME = 'CARLA'
OR EMAIL = 'LILIAN@HOTMAIL.COM'; --VAI DELETAR MAIS DE UM SE O EMAIL ESTIVER IGUAL PARA VÁRIOS (EX UPDATE ERRADO ANTERIOR)

DELETE FROM CLIENTE
WHERE NOME = 'CARLA'
AND EMAIL = 'LILIAN@HOTMAIL.COM'; --AGORA SIM



/* MODELAGEM DE DADOS
-- PRIMEIRA FORMA NORMAL
1 - TODO CAMPO VETORIZADO SE TORNARÁ OUTRA TABELA
2 - TODO CAMPO MULTIVALORADO SE TORNARÁ OUTRA TABELA
(QUANDO O CAMPO FOR DIVISÍVEL)
3 - TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE IDENTIFIQUE
TODO O REGISTRO COMO SENDO ÚNICO (PRIMARY KEY)



/* NOVO BANCO DA SESÇÃO 5 - AULA 23*/

CREATE DATABASE COMERCIO;
USE COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	EMAIL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('COM','RES','CEL'),
	NUMERO VARCHAR(10),
	ID_CLIENTE INT,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY (ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);


/*FOREIGN KEY - FK - CHAVE ESTRANGEIRA*/
--É A CHAVE PRIMARIA DE UMA TABELA QUE VAI ATÉ OUTRA TABELA FAZER REFERÊNCIA

-- EM RELACIONAMENTO 1X1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA


/*INSERTS PARA BANCO COMERCIO - EXERCICIOS*/
DESC CLIENTE

INSERT INTO CLIENTE VALUES(NULL,'JOAO','M','JOAO@GMAIL.COM','22923110');
INSERT INTO CLIENTE VALUES(NULL,'CARLOS','M','CARLOS@TERA.COM','992232121');
INSERT INTO CLIENTE VALUES(NULL,'CELIA','F','CELIA@GMAIL.COM','25078869');
INSERT INTO CLIENTE VALUES(NULL,'CLARA','F',NULL,'58748895');
INSERT INTO CLIENTE VALUES(NULL,'JORGE','M','JORGE@IG.COM','85234534');
INSERT INTO CLIENTE VALUES(NULL,'ANA','F','ANA@GLOBO.COM','548556985');
INSERT INTO CLIENTE VALUES(NULL,'CARLA','F','CARLA@TERATI.COM.BR','66587458');

DESC ENDERECO
INSERT INTO ENDERECO VALUES(NULL,'RUA A','CENTRO','BELO HORIZONTE','MG',4);
INSERT INTO ENDERECO VALUES(NULL,'RUA B','CENTRO','RIO DE JANEIRO','RJ',1);
INSERT INTO ENDERECO VALUES(NULL,'RUA C','JARDINS','SAO PAULO','SP',3);
INSERT INTO ENDERECO VALUES(NULL,'RUA D','ESTACIO','RIO DE JANEIRO','RJ',8);
INSERT INTO ENDERECO VALUES(NULL,'RUA E','CRUZEIRO','BELO HORIZONTE','MG',2);
INSERT INTO ENDERECO VALUES(NULL,'RUA E','FLAMENGO','RIO DE JANEIRO','RJ',7);
INSERT INTO ENDERECO VALUES(NULL,'RUA E','CRUZEIRO','BELO HORIZONTE','MG',5);
INSERT INTO ENDERECO VALUES(NULL,'RUA E','CENTRO','NITEROI','RJ',6);


DESC TELEFONE;
INSERT INTO TELEFONE VALUES(NULL,'CEL','91111111',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','92222222',3);
INSERT INTO TELEFONE VALUES(NULL,'CEL','93333333',2);
INSERT INTO TELEFONE VALUES(NULL,'CEL','94444444',7);
INSERT INTO TELEFONE VALUES(NULL,'CEL','95555555',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','96666666',6);
INSERT INTO TELEFONE VALUES(NULL,'CEL','97777777',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','98888888',7);
INSERT INTO TELEFONE VALUES(NULL,'CEL','99999999',7);
INSERT INTO TELEFONE VALUES(NULL,'CEL','90000000',3);
INSERT INTO TELEFONE VALUES(NULL,'CEL','91111111',6);
INSERT INTO TELEFONE VALUES(NULL,'CEL','92222222',6);


SELECT NOW() AS "DATA";

SELECT NOME, NOW() AS "DATA"
FROM CLIENTE;

SELECT NOME, SEXO
FROM CLIENTE
WHERE SEXO = 'M';


/*BUSCANDO DADOS EM MAIS DE UMA TABELA*/
--UTILIZANDO WHERE PK = FK DA OUTRA TABELA
SELECT NOME, SEXO, BAIRRO, CIDADE, NOW() AS "DATA"
FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE;


/*FAZENDO DA FORMA CORRETA - INNER JOIN ON*/
SELECT NOME, SEXO, BAIRRO, CIDADE --PROJEÇÃO
FROM CLIENTE
INNER JOIN ENDERECO --JUNÇÃO
ON IDCLIENTE = ID_CLIENTE
WHERE BAIRRO = 'CENTRO'; --SELEÇÃO

/*MAIS DE 2 TABELAS - CLÁUSULA AMBIGUA*/
SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, 
TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;
--CONSULTA ASSIM É CHAMADO PONTEIRAMENTO

/*UTILIZANDO APELIDOS PARA AS TABELAS*/
SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, 
T.TIPO, T.NUMERO
FROM CLIENTE C --BASTA COLOCAR UM NOME/LETRA AO LADO DA TABELA
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;


SELECT C.NOME, C.EMAIL, T.NUMERO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE T.TIPO = 'CEL' AND E.ESTADO = 'RJ';


SELECT C.NOME, C.EMAIL, T.NUMERO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE C.SEXO = 'F' AND T.TIPO = 'CEL' AND E.ESTADO = 'SP';


/*IFNULL*/
SELECT C.NOME,
	   IFNULL(C.EMAIL,'SEM EMAIL') AS 'EMAIL',
	   T.NUMERO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE T.TIPO = 'CEL' AND E.ESTADO = 'MG';


/* SELECIONAR TUDO DO DB "COMERCIO"*/
SELECT * 
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE


/*VIEWS OU VISÕES*/

SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL, 'SEM EMAIL') AS 'EMAIL', 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE

/*CRIANDO A VIEW*/

CREATE VIEW RELATORIO AS
SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL, 'SEM EMAIL') AS 'EMAIL', 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE


/*APAGANDO UMA VIEW*/
DROP VIEW RELATORIO;

CREATE VIEW V_RELATORIO AS --COLOCAR V PARA IDENTIFICAR QUE É UMA VIEW
SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL, 'SEM EMAIL') AS 'EMAIL', 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;



/*ORDER BY*/
SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY NOME, CPF ASC;  -- PRIMEIRO POR NOME DEPOIS CPF

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY 4;  --ORDENA PELA COLUNA 4



/* DELIMITADOR E ESTADO DO SERVIDOR*/
DELIMITER $ --TROCOU DE ; PARA $

/*PROCEDURES*/
-- trocar delimitar para outro caractere

CREATE PROCEDURE NOME()
BEGIN
--AÇÃO;
END
$  --DELIMITADOR

CREATE PROCEDURE CONTA()
BEGIN
	SELECT 10 + 10 AS "CONTA";

END
$

--DELETAR PROCEDURE
DROP PROCEDURE NOME;


CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN
	SELECT NUMERO1 + NUMERO2 AS "PROC_CONTA";
END

$


/*PROCEDURES E QUERYS + AD*/
-- CRIAR TABELA E INSERIR DADOS VIA PROCEDURE
CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	HORAS INT(3) NOT NULL,
	VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS 
VALUES(NULL,'BANCO DE DADOS FUNDAMENTAL',25,200.00);

SELECT * FROM CURSOS

DELIMITER #

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30), P_HORAS INT(3), P_PRECO FLOAT (10,2))
BEGIN
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);
END
#

/*COMMIT E ROLLBACK*/

CALL CAD_CURSO('BI',35,200.00);

CREATE PROCEDURE SEL_CURSO()
BEGIN
	SELECT IDCURSO,NOME,HORAS,VALOR
	FROM CURSOS;
END
#

CALL SEL_CURSO;

/*FUNÇÕES DE AGREGAÇÃO NUMÉRICAS*/

CREATE TABLE VENDEDORES(
	IDVENDEDORES INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT (10,2),
	MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL,'CARLOS','M',76234.78,88346.87,7753.90);
INSERT INTO VENDEDORES VALUES(NULL,'MARIA','F',24235.00,45642.87,852233.90);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO','M',234234.78,47987.09,56387.32);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA','F',65432.86,10873.53,76551.71);
INSERT INTO VENDEDORES VALUES(NULL,'ANDERSON','M',987654.09,193746.00,82610.21);
INSERT INTO VENDEDORES VALUES(NULL,'IVONE','F',751345.81,54163.55,32753.22);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO','M',312378.34,41242.11,41232.00);
INSERT INTO VENDEDORES VALUES(NULL,'CELIA','F',345671.09,55421.11,59871.88);



/*---------OPERAÇÕE DE COLUNAS - MIN,MAX,AVG----------*/

/*MIN MAX E AVERAGE AVG*/
SELECT MAX(FEVEREIRO) AS 'VALOR'
FROM VENDEDORES;

SELECT MIN(FEVEREIRO) AS 'VALOR'
FROM VENDEDORES;

SELECT AVG(FEVEREIRO) AS 'MEDIA_FEV'
FROM VENDEDORES;

SELECT MAX(JANEIRO) AS MAX_JAN,
		MIN(JANEIRO) AS MIN_JAN,
		AVG(JANEIRO) AS MEDIA_JAN
		FROM VENDEDORES;
		
		
--TRUNCATE PARÂMETROS (NUMERO, N DE CASAS)
SELECT MAX(JANEIRO) AS MAX_JAN,
		MIN(JANEIRO) AS MIN_JAN,
		TRUNCATE (AVG(JANEIRO),2) AS MEDIA_JAN
		FROM VENDEDORES;

/*AGREGANDO COM SUM()*/

SELECT SUM(JANEIRO) AS TOTAL_JAN,
		SUM(FEVEREIRO) AS TOTAL_FEV,
		SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;

SELECT 	SEXO, SUM(MARCO) AS TOTAL_MARCO
FROM VENDEDORES
GROUP BY SEXO
ORDER BY MARCO DESC;

--LEMBRANDO DO COUNT
SELECT SEXO, COUNT(*)
FROM VENDEDORES
WHERE SEXO = 'F';



/*SUB QUERY - INNER QUERY*/
/* - VENDEDOR QUE VENDEU MENOS EM MARCO E O NOME*/
SELECT * FROM VENDEDORES;

SELECT NOME, MIN(MARCO) AS 'MENOR'
FROM VENDEDORES;
-- ERRADO, TRAZ O PRIMEIRO NOME E O MENOR VALOR


--JEITO CERTO
SELECT NOME, MARCO
FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO
FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

--QUEM VENDEU MAIS QUE A MÉDIA DO MÊS
SELECT NOME, MARCO
FROM VENDEDORES
WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES);
--OBS A INNER QUERY É EXECUTADA PRIMEIRO
--NUMERO DE CAMPOS DO WHERE TEM QUE SER IGUAL AO NUMERO DE CAMPOS DA INNER QUERY



/*OPERADORES DE LINHA*/
--TRAZER VENDAS, TOTAL E MEDIA
SELECT NOME,
		JANEIRO,
		FEVEREIRO,
		MARCO,
		(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
		TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
FROM VENDEDORES;


/* APLICANDO % */

SELECT NOME,
		JANEIRO,
		FEVEREIRO,
		MARCO,
		(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
		(JANEIRO+FEVEREIRO+MARCO)*.25 AS "DESCONTO",
		TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
FROM VENDEDORES;	


/*ALTERANDO A ESTRUTURA DE UMA TABELA*/
CREATE TABLE TABELA(
		COLUNA1 VARCHAR(30),
		COLUNA2 VARCHAR(30),
		COLUNA3 VARCHAR(30)
);

--ADICIONAR PK
ALTER TABLE
ADD PRIMARY KEY(COLUNA1);

--ADICIONANDO COLUNA SEM POSIÇÃO. ULTIMA POSIÇÃO
ALTER TABLE TABELA
ADD COLUNA4 VARCHAR(30);

--ADICIONANDO UMA COLUNA COM POSIÇÃO.
ALTER TABLE TABELA
ADD COLUMN COLUNA0 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

ALTER TABLE TABELA
ADD COLUNA100 INT(11);

--MODIFICANDO TIPO DO CAMPO
ALTER TABLE TABELA
MODIFY COLUNA2 DATE NOT NULL;

--RENOMEANDO TABELA
ALTER TABLE TABELA
RENAME PESSOA;

CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);

--ADD FOREIGN KEY
ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);


/*VERIFICAR AS CHAVES DE UMA TABELA*/
SHOW CREATE TABLE TIME;


/*ORGANIZAÇÃO DE CHAVES - CONSTRAINT*/
CREATE TABLE JOGADOR(
	IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30)
);

CREATE TABLE TIMES(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	NOMETIME VARCHAR(30),
	ID_JOGADOR INT,
	FOREIGN KEY(ID_JOGADOR)
	REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES(NULL,'GUERRERO');
INSERT INTO TIMES VALUES(NULL,'FLAMENGO',1);


/* ORGANIZANDO CHAVES E AÇÕES DE CONSTRAINTS*/
--SE CRIA AS CHAVES PK/FK APÓS A CRIAÇÃO DA TABELA, COMO BOAS PRÁTICAS
SHOW TABLES;

DROP TABLE ENDERECO;
DROP TABLE TELEFONE;
DROP TABLE CLIENTE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

SHOW CREATE TABLE TELEFONE;


/*DICIONÁRIO DE DADOS - GUARDA OS METADADOS DO BANCO*/

SHOW DATABASES;

USE INFORMATION_SCHEMA;

SHOW TABLES;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
		TABLE_NAME AS "TABELA",
		CONSTRAINT_NAME AS "NOME REGRA",
		CONSTRAINT_TYPE AS "TIPO"
		FROM TABLE_CONSTRAINTS
		WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

/*APAGANDO CONSTRAINTS*/
USE COMERCIO;

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

--CRIANDO NOVAMENTE
ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);


/*CORREÇÃO EXERCÍCIO OFICINA SEU JOSÉ*/
CREATE DATABASE OFICINA;

USE OFICINA;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	ID_CARRO INT UNIQUE
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('CEL','RES','COM') NOT NULL,
	NUMERO VARCHAR(30) NOT NULL,
	ID_CLIENTE INT
);

CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR(30) NOT NULL,
	PLACA VARCHAR(30) NOT NULL UNIQUE,
	ID_MARCA INT
);

CREATE TABLE COR(
	IDCOR INT PRIMARY KEY AUTO_INCREMENT,
	COR VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO_COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY(ID_CARRO,ID_COR)
);


/*CONSTRAINTS DO OFICINA*/

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY (ID_CARRO)
REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY (ID_MARCA)
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY(ID_COR)
REFERENCES COR(IDCOR);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

/*PREENCHER O BANCO COM NO MÍNIMO 10 CLIENTES*/

INSERT INTO MARCA VALUES(NULL,'TOYOTA');
INSERT INTO MARCA VALUES(NULL,'HONDA');
INSERT INTO MARCA VALUES(NULL,'VOLKSWAGEN');
INSERT INTO MARCA VALUES(NULL,'FORD');
INSERT INTO MARCA VALUES(NULL,'NISSAN');

INSERT INTO CARRO VALUES(NULL,'HILUX','PLC3412',1);
INSERT INTO CARRO VALUES(NULL,'CIVIC','AAA0001',2);
INSERT INTO CARRO VALUES(NULL,'GOL','ABC1234',3);
INSERT INTO CARRO VALUES(NULL,'MUSTANG','BKP9823',4);
INSERT INTO CARRO VALUES(NULL,'VERSA','TIC1717',5);
INSERT INTO CARRO VALUES(NULL,'COROLLA','PLC9129',1);
INSERT INTO CARRO VALUES(NULL,'FUSCA','JAV6969',3);
INSERT INTO CARRO VALUES(NULL,'KA','TIC4131',4);
INSERT INTO CARRO VALUES(NULL,'SENTRA','GOL7777',5);
INSERT INTO CARRO VALUES(NULL,'FIT','KOM6969',2);

INSERT INTO CLIENTE VALUES(NULL,'PEDRÃO','M',14);
INSERT INTO CLIENTE VALUES(NULL,'VELHO','M',16);
INSERT INTO CLIENTE VALUES(NULL,'CELIA','F',18);
INSERT INTO CLIENTE VALUES(NULL,'TONHO','M',17);
INSERT INTO CLIENTE VALUES(NULL,'ALCEMAR','M',11);
INSERT INTO CLIENTE VALUES(NULL,'ANA','F',12);
INSERT INTO CLIENTE VALUES(NULL,'MARIA','F',13);
INSERT INTO CLIENTE VALUES(NULL,'MARCOS','M',15);
INSERT INTO CLIENTE VALUES(NULL,'JOAO','M',19);
INSERT INTO CLIENTE VALUES(NULL,'LILIAN','F',20);

INSERT INTO COR VALUES(NULL,'VERMELHO');
INSERT INTO COR VALUES(NULL,'AZUL');
INSERT INTO COR VALUES(NULL,'AMARELO');
INSERT INTO COR VALUES(NULL,'PRETO');
INSERT INTO COR VALUES(NULL,'VERDE');
INSERT INTO COR VALUES(NULL,'PRATA');

INSERT INTO TELEFONE VALUES(NULL,'CEL','95234569',1);
INSERT INTO TELEFONE VALUES(NULL,'RES','92223124',2);
INSERT INTO TELEFONE VALUES(NULL,'COM','96435678',3);
INSERT INTO TELEFONE VALUES(NULL,'CEL','99876543',4);
INSERT INTO TELEFONE VALUES(NULL,'RES','92398765',5);
INSERT INTO TELEFONE VALUES(NULL,'COM','97345677',6);
INSERT INTO TELEFONE VALUES(NULL,'CEL','93518620',7);
INSERT INTO TELEFONE VALUES(NULL,'RES','98631998',8);
INSERT INTO TELEFONE VALUES(NULL,'COM','97896232',9);
INSERT INTO TELEFONE VALUES(NULL,'CEL','99775228',10);



--VERIFICAR INSERTS DA TABELA CARRO_COR


/*ESTRUTURA DE UMA TRIGGER*/
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW
BEGIN ->

END - >


--EXEMPLO TRIGGER
CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

--CRIANDO A TRIGGER
--OBS: NÃO É POSSÍVEL 2 TRIGGERS APONTADAS PARA O MESMO EVENTO
DELIMITER $
CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
	INSERT INTO BKP_USUARIO VALUES
	(NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);
	

END
$

INSERT INTO USUARIO VALUES(NULL,'ANDRADE','ANDRADE2009','MANDANUDES');

SELECT * FROM USUARIO;

DELETE FROM USUARIO
WHERE IDUSUARIO = 1;


/*COMUNICAÇÃO ENTRE BANCOS*/

CREATE DATABASE LOJA;
USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;
USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE LOJA

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE PRD',0.0);

SELECT * FROM BACKUP.BKP_PRODUTO; --USAR O NOME DO SCHEMA/BANCO ANTES DA TABELA.

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
	NEW.NOME,NEW.VALOR);

END
$

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL',1000.00);

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,
	OLD.NOME,OLD.VALOR);

END
$

DELIMITER ;

DELETE FROM PRODUTO WHERE IDPRODUTO = '2';

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO; --ITEM SAIU DA PRODUTO MAS FOI FEITO BKP NA BKP PRODUTO


--CORRIGINDO A TRIGGER PARA PEGAR O ID AO INSERIR
DROP TRIGGER BACKUP_PRODUTO;

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO   --USAR AFTER INSERT PARA PEGAR O ID DO NOVO ITEM INSERIDO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
	NEW.NOME,NEW.VALOR);

END
$

INSERT INTO PRODUTO VALUES(NULL,'LIVRO C#',100.00);


/*REFINANDO TRIGGER COM EVENTOS*/
ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DEL;

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES (NULL,OLD.IDPRODUTO,
	OLD.NOME,OLD.VALOR,'D');

END
#

DELETE FROM PRODUTO WHERE IDPRODUTO = 4;


/*TRIGGER DE AUDITORIA*/


DROP DATABASE LOJA;
DROP DATABASE BACKUP;
--FUCK THE POLICE

CREATE DATABASE LOJA;
USE LOJA;


INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL',1000.00);

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

/*QUANDO E QUEM*/
SELECT NOW();
SELECT CURRENT_USER();


CREATE DATABASE BACKUP;
USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)

);

USE LOJA;
SELECT * FROM PRODUTO;

DELIMITER #
CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO, OLD.NOME,
	OLD.VALOR, NEW.VALOR,NOW(),CURRENT_USER(),'U');

END
#
/*LEMBRETE: COMO A TRIGGER SERÁ CRIADA NO BANCO LOJA ONDE ESTÁ A TABELA PRODUTO
NÃO É NECESSÁRIO APONTAR DE ONDE VEM OS VALORES DA TABELA PRODUTO, NEM NO OLD/NEW,
SOMENTE PARA ONDE ELES VÃO, BACKUP.BKP_PRODUTO*/

DELIMITER;

UPDATE PRODUTO SET VALOR =110.00
WHERE IDPRODUTO = 4;

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;


/*AUTO RELACIONAMENTO*/

CREATE DATABASE AULA44
USE AULA44
CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT --CURSOS TEM PRÉ REQUISITO ENTÃO NÃO PODE SER NULL NEM UNIQUE
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSSINESS INTELIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA DE PROGRAMACAO',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,4);


SELECT NOME, VALOR, HORAS, IFNULL(ID_PREREQ,'SEM REQ') AS "REQUISITO"
FROM CURSOS;

/*RELACIONAR ID DO PRE REQUISITO COM ID DO CURSO
INNER JOIN NA PRÓPRIA TABELA*/


SELECT C.NOME AS "CURSO", 
		C.VALOR AS "VALOR", 
		C.HORAS AS "CARGA", 
		IFNULL(P.NOME,'---') AS "PREREQ"
FROM CURSOS C
INNER JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ; --CURSO TEM O ID DO PREREQ JÁ CADASTRADO

--LEFT JOIN: TRAZ OS CURSOS QUE TEM PREREQ E OS QUE NÃO TEM.
SELECT C.NOME AS "CURSO", 
		C.VALOR AS "VALOR", 
		C.HORAS AS "CARGA", 
		IFNULL(P.NOME,'---') AS "PREREQ"
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ; --CURSO TEM O ID DO PREREQ JÁ CADASTRADO


/*CURSORES*/

CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'CORNO',32453,54321,67895);
INSERT INTO VENDEDORES VALUES(NULL,'BOTAO',67887,91773,87719);
INSERT INTO VENDEDORES VALUES(NULL,'BATATA',82145,12345,98763);
INSERT INTO VENDEDORES VALUES(NULL,'SHOW',32453,28177,78921);
INSERT INTO VENDEDORES VALUES(NULL,'CHIHIRO',10928,54572,91783);
INSERT INTO VENDEDORES VALUES(NULL,'MAMBEMBE',93213,12121,19737);


SELECT NOME, (JAN+FEV+MAR) AS "TOTAL"
FROM VENDEDORES;

SELECT NOME, (JAN+FEV+MAR) AS "TOTAL", (JAN+FEV+MAR)/3 AS "MEDIA"
FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT
);

/*EXEMPLO DE CURSOR*/
DELIMITER #

CREATE PROCEDURE INSEREDADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1,VAR2,VAR3, VTOTAL, VMEDIA INT;
	DECLARE VNOME VARCHAR(50);

	DECLARE REG CURSOR FOR(
		SELECT NOME, JAN,FEV,MAR FROM VENDEDORES
	);
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
		
	OPEN REG;

		REPEAT
			FETCH REG INTO VNOME,VAR1,VAR2,VAR3;
			IF NOT FIM THEN
			
				SET VTOTAL = VAR1 + VAR2 + VAR3;
				SET VMEDIA = VTOTAL/3;
				
				INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);
			END IF;
		UNTIL FIM END REPEAT;
		
	CLOSE REG;
END
#

CALL INSEREDADOS();


/*EXERCÍCIOS 2º E 3º FORMAS NORMAIS*/

CREATE DATABASE CONSULTORIO;
USE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE

);

CREATE TABLE MEDICO(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE
);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY (ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY (ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);














































