CREATE TABLESPACE RECURSOS_HUMANOS
DATAFILE 'C:/DATA/RH_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;


ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'C:/DATA/RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;

SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

--SEQUENCES
CREATE SEQUENCE SEQ_GERAL
START WITH 100
INCREMENT BY 10;


--CRIANDO UMA TABELA NA TABLESPACE
CREATE TABLE FUNCIONARIOS(
    IDFUNCIONARIO INT PRIMARY KEY,
    NOME VARCHAR2(30)
)TABLESPACE RECURSOS_HUMANOS;

INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'JOAO');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'CLARA');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'LILIAN');

SELECT * FROM FUNCIONARIOS;


/*ALTERANDO TABLESPACES*/
CREATE TABLESPACE MARKETING
DATAFILE 'C:/DATA/MKT_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

CREATE TABLE CAMPANHAS(
    IDCAMPANHA INT PRIMARY KEY,
    NOME VARCHAR2(30)
)TABLESPACE MARKETING;

INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'PRIMAVERA');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'VERÃO');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'INVERNO');

SELECT * FROM CAMPANHAS;

--COLOCANDO A TABLESPACE OFFLINE
ALTER TABLESPACE RECURSOS_HUMANOS OFFLINE;

SELECT * FROM FUNCIONARIOS;
SELECT * FROM CAMPANHAS;

--PODE-SE COPIAR MANUALMENTE OS .DBFs DE UMA PASTA PARA A OUTRA
--APÓS A MUDANÇA TEM QUE APONTAR O NOVO CAMINHO PARA O TABLESPACE

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_01.DBF' TO 'C:/PRODUCAO/RH_01.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_02.DBF' TO 'C:/PRODUCAO/RH_02.DBF';

--COLOCANDO A TABLESPACE ONLINE NOVAMENTE
ALTER TABLESPACE RECURSOS_HUMANOS ONLINE;

SELECT * FROM FUNCIONARIOS;
SELECT * FROM CAMPANHAS;


/*PSEUDO COLUNAS*/
CREATE TABLE ALUNO(
    IDALUNO INT PRIMARY KEY,
    NOME VARCHAR2(30),
    EMAIL VARCHAR2(30),
    SALARIO NUMBER(10,2)
);

CREATE SEQUENCE SEQ_EXEMPLO;

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'JOAO','JOAO@GBOLA.COM',1000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','CLARA@BOLA.COM',2000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','CELIA@BOL.COM',3000.00);

SELECT * FROM ALUNO;


CREATE TABLE ALUNO2(
    IDALUNO INT PRIMARY KEY,
    NOME VARCHAR2(30),
    EMAIL VARCHAR2(30),
    SALARIO NUMBER(10,2)
);

INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'JOAO','JOAO@GBOLA.COM',1000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','CLARA@BOLA.COM',2000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','CELIA@BOL.COM',3000.00);

SELECT * FROM ALUNO2;

/*ROWID: ENDEREÇO FÍSICO DO REGISTRO NO BANCO (NÚMERO ÚNICO)
E ROLNUM: PAGINAR REGISTROS */

SELECT ROWID, IDALUNO, NOME, EMAIL FROM ALUNO;

SELECT ROWID,ROWNUM, IDALUNO, NOME, EMAIL FROM ALUNO2;

SELECT NOME, EMAIL FROM ALUNO WHERE ROWNUM <2;


/*==================TRIGGERS========================*/

--USANDO UMA PROCEDURE
--OBS: USAR NOME_TABELA.NOME_CAMPO%TYPE PARA MANTER FUNCIONANDO CASO MUDE O TIPO NA TABELA
CREATE OR REPLACE PROCEDURE BONUS(P_IDALUNO ALUNO.IDALUNO%TYPE, P_PERCENT NUMBER)
AS
    BEGIN
        UPDATE ALUNO SET SALARIO = SALARIO + (SALARIO*(P_PERCENT /1000))
        WHERE P_IDALUNO = P_IDALUNO;
    
    END;
/

/*AS TRIGGERS DEVEM TER NO MÁXIMO 32K DE TAMANHO.
NÃO EXECUTAM COMANDOS DE DTL - COMIT, ROLLBACK E SAVEPOINTS*/

/*TRIGGER DE VALIDAÇÃO*/
CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN
    IF :NEW.SALARIO < 2000 THEN
        RAISE_APPLICATION_ERROR(-20000,'VALOR INCORRETO');
    END IF;
    
END;
/

SHOW ERRORS;
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'MAFRÃO DA MASSA','MAFRA@GMAIL.COM',100.00);
--VEM A MENSAGEM COM 20000 E 'VALOR INCORRETO'


/*INFORMÇÕES DE UMA TRIGGER*/
SELECT TRIGGER_NAME, TRIGGER_BODY
FROM USER_TRIGGERS;


--TRIGGER DE EVENTOS E AUDITORIA
CREATE TABLE AUDITORIA(
    DATA_LOGIN DATE,
    LOGIN VARCHAR2(30)
);


CREATE OR REPLACE PROCEDURE LOGPROC IS
BEGIN
    INSERT INTO AUDITORIA(DATA_LOGIN,LOGIN)
    VALUES(SYSDATE, USER);

END LOGPROC;
/

SELECT SYSDATE FROM DUAL;
SELECT USER FROM DUAL;

CREATE OR REPLACE TRIGGER LOGTRIGGER
AFTER LOGON ON DATABASE
CALL LOGPROC
/

CREATE OR REPLACE TRIGGER FALHA_LOGON
AFTER SERVERERROR
ON DATABASE
BEGIN
    IF (IS_SERVERERROR(1017)) THEN
        INSERT INTO AUDITORIA(DATA_LOGIN,LOGIN)
        VALUES(SYSDATE,'ORA-1017');
    END IF;
END FALHA_LOGON;
/
SELECT * FROM AUDITORIA;

--1004 default username feature not supported
--1005 password nulo
--1045 privilégio insuficiente


/*TRIGGERS DE DML*/
CREATE TABLE USUARIO(
    ID INT,
    NOME VARCHAR2(30)
);

CREATE TABLE BKP(
    ID INT,
    NOME VARCHAR2(30)
);

INSERT INTO USUARIO VALUES(1,'JOAO');
INSERT INTO USUARIO VALUES(2,'CLARA');
COMMIT;

SELECT * FROM USUARIO;

CREATE OR REPLACE TRIGGER LOG_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
    INSERT INTO BKP VALUES(:OLD.ID, :OLD.NOME); --SE FOSSE VALOR NOVO SERIA :NEW

END;
/

DELETE FROM USUARIO WHERE ID=1;

SELECT * FROM BKP;


/*============VIEWS============*/
--OPERAÇÕES COM VIEWS

CREATE TABLE CLIENTE(
    IDCLIENTE INT PRIMARY KEY,
    NOME VARCHAR2(30),
    SEXO CHAR(1)
);

INSERT INTO CLIENTE VALUES(1007,'MAFRÃO','M');

CREATE OR REPLACE VIEW V_CLIENTE
AS
    SELECT IDCLIENTE, NOME, SEXO
    FROM CLIENTE;

--É POSSÍVEL INSERIR EM UMA VIEW QUE NÃO TENHA JOIN
INSERT INTO V_CLIENTE VALUES(1008,'CLARA','F');

SELECT * FROM CLIENTE;
SELECT * FROM V_CLIENTE;
--TRAZ OS MESMOS VALORES

CREATE OR REPLACE VIEW V_CLIENTE_RO
AS
    SELECT IDCLIENTE,NOME,SEXO
    FROM CLIENTE
    WITH READ ONLY; --NÃO PERMITIRÁ INSERIR

--VIEW DE JOIN
CREATE OR REPLACE VIEW RELATORIO
AS
    SELECT NOME, SEXO, NUMERO
    FROM CLIENTE
    INNER JOIN TELEFONE
    ON IDCLIENTE = ID_CLIENTE;

--NÃO PERMITE CRIAR A VIEW SE AS TABELAS NÃO EXISTIREM AINDA

--FORCE
CREATE OR REPLACE FORCE VIEW RELATORIO
AS
    SELECT NOME, SEXO, NUMERO
    FROM CLIENTE
    INNER JOIN TELEFONE
    ON IDCLIENTE = ID_CLIENTE;
--COMPILA COM ERRO MAS CRIA A VIEW

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY,
    NUMERO VARCHAR2(10),
    ID_CLIENTE INT
);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

INSERT INTO TELEFONE VALUES(1,'1346765',1007);
COMMIT;

SELECT * FROM RELATORIO;
--DEPOIS QUE A TABELA FOR CRIADA A VIEW FUNCIONA NORMALMENTE


/*DEFERABLE CONSTRAINTS*/
CREATE TABLE FUNCIONARIO(
    IDFUNCIONARIO INT CONSTRAINT PK_FUNCIONARIO PRIMARY KEY,
    NOME VARCHAR2(100)
);

DROP TABLE TELEFONE;

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY,
    NUMERO VARCHAR2(10),
    ID_FUNCIONARIO INT
);

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO;

INSERT INTO FUNCIONARIO VALUES(1,'MAURICIO');
INSERT INTO TELEFONE VALUES(10,'5433456',1);

/*A CONSTRAINT DE INTEGRIDADE REFERENCIAL (FK) CHECA A INTEGRIDADE
LOGO APÓS O COMANDO DE DML
INSERT / DELETE /UPDATE - NÃO POSSIBILITANDO ASSIM INSERÇÃO DE REGISTROS
SEM REFERÊNCIA*/

INSERT INTO TELEFONE VALUES (2,'5431233',34); --NÃO TEM 34, ERRO DE INTEGRIDADE
DELETE FROM FUNCIONARIO WHERE IDFUNCIONARIO = 1; --ESTA VINCULADO A UM USUARIO, ERRO DE INTEGRIDADE

--VERIFICANDO ESTADO DAS CONSTRAINTS
SELECT CONSTRAINT_NAME, DEFERRABLE, DEFERRED
FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('FUNCIONARIO','TELEFONE');

--NOT DEFERRABLE: NÃO PODE SER ADIADA A CHECAGEM
--DEFERRED - IMEDIATE: A CHECAGEM DE PK/FK SERÁ IMEDIATA APÓS A INSERÇÃO

/*APAGANDO AS CONSTRAINTS*/
ALTER TABLE TELEFONE DROP CONSTRAINT FK_TELEFONE;

/*RECRIANDO A CONSTRAINT COMO DEFERRABLE*/
ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO
DEFERRABLE;

SELECT CONSTRAINT_NAME, DEFERRABLE AS "ATRASADA", DEFERRED AS "VERIFICAÇÃO"
FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('FUNCIONARIO','TELEFONE');

INSERT INTO TELEFONE VALUES(4,'0498592',10);
--ERRO, PODE SER ATRASADA MAS A CHECAGEM AINDA ESTÁ COMO IMEDIATA

/*MUDANDO PARA A DTL*/
SET CONSTRAINTS ALL DEFERRED;

INSERT INTO TELEFONE VALUES(4,'0498592',10);

SELECT * FROM TELEFONE;
SELECT * FROM FUNCIONARIO;
--SEM INTEGRIDADE RELACIONAL

COMMIT;
--FEZ ROLLBACK AUTOMÁTICO DEVIDO AO ERRO






















